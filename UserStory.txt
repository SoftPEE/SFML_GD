SFML_GD
Author:				Patrick Gehrt
Datum:				08.02.2017
Letzte Bearbeitung	26.02.2017
Version:			0.0.0.3
SFML-Version:		2.4.1

Beschreibung:	SFML Game Development
	Lernen wie mit Hilfe der SFML-Bibliothek und C++ ein Spiel entwickelt wird.

================================================================================================================================================
Anforderungen Iteration_01
	Grundframework erstellen, d.h. die grundlegenden logischen Abläufe in einem Spiel sollen erstellt und implementiert werden.
		- Main-Loop
		- Event-Loop

	Grundgerüst für's Userinput erstellen und implementieren.
		- WASD für die Bewegungssteuerung vorbereiten

	Fixed-Time-Steps
		- Für berechenbare Bewegungen soll ein fixe FrameTime vorgegeben werden (1/60 Sekunde)

	Resourcen-Template
		- Template für die Verwaltung von Resourcen, wie Bilder, Fonts, Musik, etc. erstellen

	Config-Handler
		- Handler für Konfigurationsdateien erstellen
		- Über die Streamoperatoren >>, << können Konfigurationsdateien ein und ausgelesen werden

	Entitis - System
		- Alle im Spiel enthaltenen Objekte sind vom Objekt Entity abgeleitet
		- Entity enthält die grundlegenden Funktionen

	Aircraft
		- Objekte für verschiedene Aircrafts
		- Abgeleitet von Entity

	SceneNode
		- SceneNode Objekte bildet die Datenstruktur aller Objekte dar
		- sämtliche Objekte sind von der Klasse abgeleitet (Entity)
		- SceneNode Objekte sollen in einem Graphen verwaltet werden

	Testumgebung erstellen
		- Spieler-Aircraft mit 2 eskortierenden Flugzeugen zu Testzwecken übers Spielfeld fliegen lassen

	Message System
		- siehe Message System.txt

	PlayerInput
		- Mittels einer Controlerklasse werden die Playerinputs als Messages aufgenommen und im Spiel interpretiert

	State System
		- State - Basisklasse und Statestack erstellen

	TitleState erstellen
	GameState erstellen
		- GameState wird von der vorherigen Klasse Game gebildet
		- Die Funktionalität der Methode Run() wird in einer neuen Klasse Application gelegt

	Application
		- Hauptklasse in der die gesamte Datenstruktur liegt

	MenuState erstellen
	Pausesate erstellen

	GUI
		- Basis-Klasse Component
			->	Drawable, Transformable, NonCopyable
			->	Grundfunktionalität einer GUI-Klasse
		- Container
			->	Containerklasse um mehrere GUI-Elemente zu einer zusammenhängenden Struktur behandeln zu können
		- Button
			->	Button als Schalter
			->	Button als Taster
		- Label
			->	Text

	MenuState mit GUI ausstatten
		- Play
		- Setting
		- Exit

	Settingstate erstellen
		- Ermöglicht dem Benutzer die Tastenbelegung zu ändern

	Spielmechaniken implementieren
		- Objekte bekommen Lebenspunkte, die nun durch den Entity-Konstruktor explizit angegeben werden müssen.
		- Funktionalität zur Reduzierung und Auffülung der Lebenspunkte.
